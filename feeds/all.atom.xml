<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dev Log and also other Blog Stuff too</title><link href="http://drmonkeysee.github.io/" rel="alternate"></link><link href="http://drmonkeysee.github.io/feeds/all.atom.xml" rel="self"></link><id>http://drmonkeysee.github.io/</id><updated>2015-12-23T00:00:00-08:00</updated><entry><title>Blog Config Revisited</title><link href="http://drmonkeysee.github.io/blog/2015/12/23/blog-config-revisited" rel="alternate"></link><updated>2015-12-23T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-23:blog/2015/12/23/blog-config-revisited</id><summary type="html">&lt;p&gt;A quick heads up for all the folks out there. I had to make a couple minor fixes that may be of interest to anyone leveraging Pelican the way I am.&lt;/p&gt;
&lt;h2&gt;Ignore Files&lt;/h2&gt;
&lt;p&gt;My &lt;a href="http://drmonkeysee.github.io/blog/2015/12/22/theme-layout-thoughts"&gt;last entry&lt;/a&gt; introduced the first static files into the blog; namely the thumbnail and full-size image of my layout sketch. At one point I had an OS X Finder window open on these folders so it very helpfully created &lt;strong&gt;.DS_Store&lt;/strong&gt; files to keep track of various Finder-y things. When publishing, Pelican will copy any files in the &lt;code&gt;STATIC_PATHS&lt;/code&gt; list verbatim. Including, it turns out, hidden files. I'd inadvertently published random desktop garbage into my site.&lt;/p&gt;
&lt;p&gt;Normally a &lt;strong&gt;.gitignore&lt;/strong&gt; file will catch this but since &lt;code&gt;master&lt;/code&gt; is managed by Pelican it doesn't include anything not generated by the publish action.&lt;/p&gt;
&lt;p&gt;This can be easily remedied by adding &lt;code&gt;'.DS_Store'&lt;/code&gt; to the &lt;code&gt;IGNORE_FILES&lt;/code&gt; list in &lt;strong&gt;pelicanconf.py&lt;/strong&gt; and they'll get zapped the next time you publish. In my particular case I removed the default ignore pattern as well since I don't use emacs. As usual, consult the &lt;a href="http://docs.getpelican.com/en/3.6.3/settings.html"&gt;Pelican docs&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;Filesystem Dates&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="http://drmonkeysee.github.io/blog/2015/12/15/publish-pelican-blog"&gt;publish post&lt;/a&gt; I pointed out that setting &lt;code&gt;DEFAULT_DATE = 'fs'&lt;/code&gt; was a handy way to auto-generate publish dates based on the filesystem. This works great if the file's modified date never changes, which it shouldn't after you've published it. Right? &lt;em&gt;Right?&lt;/em&gt; Except when you want to switch branches in git. Oops. Want to pop open &lt;code&gt;master&lt;/code&gt; for some reason (like, I dunno, investigating why dot files are getting published) and then jump back into &lt;code&gt;source&lt;/code&gt;? Your whole blog just did the time warp!&lt;/p&gt;
&lt;p&gt;I'm keeping the 'fs' setting since it's handy when drafting a post, but just like setting &lt;code&gt;Status&lt;/code&gt; manually I'll have to write out the &lt;code&gt;Date&lt;/code&gt; field on every post when I'm ready to publish. Since I already have to remove the "draft" status when publishing it's not a huge deal to replace it with the date. &lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Initial layout thoughts</title><link href="http://drmonkeysee.github.io/blog/2015/12/22/theme-layout-thoughts" rel="alternate"></link><updated>2015-12-22T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-22:blog/2015/12/22/theme-layout-thoughts</id><summary type="html">&lt;p&gt;I need a layout. The first thing is read over the &lt;a href="http://getbootstrap.com/css/"&gt;Bootstrap&lt;/a&gt; docs to refresh my memory on its visual components. I sling a few HTML elements and CSS rules around. And then I step back.&lt;/p&gt;
&lt;p&gt;Gross. This isn't working. I need to figure all the blog parts and how they should fit together before I start writing actual HTML. I'm having trouble visualizing it otherwise.&lt;/p&gt;
&lt;p&gt;Normally I would draw something quick on paper but this is a dev log; the whole point is to show my work! Drawing on a laptop touchpad is a no-go so I look around for paint programs I can use on a tablet. Turns out &lt;a href="http://www.pixelmator.com/mac/"&gt;Pixelmator&lt;/a&gt; fits the bill as there's both an iOS and OS X version, making it easy to move sketches around.&lt;/p&gt;
&lt;p&gt;I'm not looking to create anything fancy; a two column layout with content on the left and navigation/links on the right. This is pretty easy in Bootstrap so I'm not too worried. The bigger question at the moment is cataloguing all the Pelican features and deciding how they fit together. In addition there's two flags I'd like the theme to pay attention to: &lt;code&gt;DISPLAY_PAGES_ON_MENU&lt;/code&gt; and &lt;code&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/code&gt;. This means a design that can include or exclude page and category links without looking janky.&lt;/p&gt;
&lt;p&gt;My initial attempt:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drmonkeysee.github.io/images/2015-12/initial-index-layout.png" title="Initial index layout"&gt;
    &lt;img src="http://drmonkeysee.github.io/images/2015-12/initial-index-layout-t.png" alt="Initial index layout"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's a rough sketch! Done on an iPad with my finger! Judge not. That weird block in the upper-right is an RSS/ATOM feed icon in case you're wondering. Overall the iOS drawing worked out fine though I'll probably rely on fewer text elements to fill out space in the future as they're awfully fiddly on a touch screen. I briefly considered getting a stylus but surveying the results on Amazon led to a field of broken dreams, so touch-drawing it is.&lt;/p&gt;
&lt;p&gt;The left-hand column is where content will go. The latest blog post will be shown in full, the rest will be summaries, and pagination controls fill out the column. The right-hand column is all navigation and other various links. "categories", "tags", and "archives" are all generated by Pelican. "pages" includes about me, etc while "social" and "links" are the &lt;code&gt;SOCIAL&lt;/code&gt; and &lt;code&gt;LINKS&lt;/code&gt; settings in &lt;strong&gt;pelicanconf.py&lt;/strong&gt; respectively. This is a layout diagram only so no visual elements described. I'll figure that out later.&lt;/p&gt;
&lt;p&gt;One side-effect I did &lt;em&gt;not&lt;/em&gt; anticipate was the retina screen factor. I created thumbnail and full-size images in Pixelmator, linked them into the blog post, and tested in a browser... it looked &lt;em&gt;terrible&lt;/em&gt;. Turns out Pixelmator displays the image in actual pixels, but everything else will scale up by a factor of two for the retina resolution. Every image I sized ended up twice as large in the browser and the compression made everything look like garbage. So scale everything to half what I want visually and make sure it looks ok at 200% size. There's other CSS tricks to make this work better with 2x images but these rough sketches aren't worth it.&lt;/p&gt;
&lt;p&gt;Anyway the upshot is I have a visualization to which I'm working towards in HTML. The exercise did raise some questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'll have to play with the order of right-hand nav once I get something rendering. I'm not sure what the user will find most relevant and it will be tough to judge until I can see it in-browser.&lt;/li&gt;
&lt;li&gt;Most Pelican themes list additional blog posts inline with the rest of the content and that's what I've drawn here but I don't like the look much. I may swing older posts into the nav bar but that poses questions on how the pagination would work visually.&lt;/li&gt;
&lt;li&gt;For a single article page I'd like to show related blog posts, ordered by tags. Some sort of sorted intersection of tags across all articles should work, but I'm not sure I have that level of control in Jinja.&lt;/li&gt;
&lt;li&gt;The current image linking is ugly: I'm going to pull in &lt;a href="http://www.jacklmoore.com/colorbox/"&gt;Colorbox&lt;/a&gt; to do the visual display.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The index template will inform all the other pages on the blog. I'm anticipating that every page will look more or less like this one other than the content column. Next time we'll talk HTML.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category><category term="theming"></category><category term="tools"></category></entry><entry><title>Theme Base Design</title><link href="http://drmonkeysee.github.io/blog/2015/12/19/theme-base" rel="alternate"></link><updated>2015-12-19T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-19:blog/2015/12/19/theme-base</id><summary type="html">&lt;p&gt;The first step for my custom theme is designing the basic structure of every page, placed in &lt;strong&gt;base.html&lt;/strong&gt;. I decided the first step of &lt;em&gt;that&lt;/em&gt; process is making the machines happy. Picking out the meta tags, feed links, title, doctype, and all the other tags that no one sees but tells various computers what's going on.&lt;/p&gt;
&lt;p&gt;Layout and other visual elements will come later, though I've already decided what I'll start with. As mentioned in an &lt;a href="http://drmonkeysee.github.io/blog/2015/12/05/theme-shopping"&gt;earlier post&lt;/a&gt; I'm going to base my theme on &lt;a href="http://getbootstrap.com"&gt;Bootstrap&lt;/a&gt;. It's not clear to me if I want to pull in &lt;a href="http://fontawesome.io"&gt;Font Awesome&lt;/a&gt;, although the icon list looks very promising. I do know I don't want to write something from the ground-up. I don't particularly enjoy endlessly tweaking CSS and that will be my entire life if I start with a blank canvas.&lt;/p&gt;
&lt;p&gt;I'll be closely following the &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html"&gt;theme documentation&lt;/a&gt; for Pelican, the &lt;a href="http://jinja.pocoo.org/docs/dev/templates/"&gt;Jinja2 docs&lt;/a&gt;, as well as referencing various repos for examples.&lt;/p&gt;
&lt;h2&gt;Styling&lt;/h2&gt;
&lt;p&gt;Grabbing Bootstrap is easy enough. There are CDN links for both &lt;a href="https://www.bootstrapcdn.com"&gt;Bootstrap&lt;/a&gt; and &lt;a href="https://code.jquery.com"&gt;jQuery&lt;/a&gt; so those will be the first thing to throw into &lt;strong&gt;base.html&lt;/strong&gt;. That way I don't have to pull the files in myself, I can leverage existing browser caches, and I can easily update the frameworks the next time they release.&lt;/p&gt;
&lt;p&gt;As per best practice, CSS goes in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and JavaScript goes at the bottom of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Meta tags&lt;/h2&gt;
&lt;p&gt;There's a thousand different meta tags out there and it can be difficult to determine exactly what any particular page needs. I'm using &lt;a href="http://code.lancepollard.com/complete-list-of-html-meta-tags/"&gt;this list&lt;/a&gt; as a handy guide and will be picking-and-choosing as I go. The nice thing about having a reference like this is it brings to my attention elements I wouldn't have thought of otherwise, like the Apple-specific tags, but we can look into those later. To start with we'll add the minimum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;charset to be a good web citizen&lt;/li&gt;
&lt;li&gt;author and subject for self-aggrandizement&lt;/li&gt;
&lt;li&gt;the required tags for Bootstrap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition there will be content-specific tags that child templates will insert so we'll add a meta tag block to hook into. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenGraph tags for sharing on Facebook, though it's unclear to me what &lt;code&gt;og:image&lt;/code&gt; would be&lt;/li&gt;
&lt;li&gt;let's give Twitter some love as well&lt;/li&gt;
&lt;li&gt;description and keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those basics give us this for &lt;strong&gt;base.html&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;&amp;lt;!-- browsers want this to be the first tag --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- these two are required by Bootstrap --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IE=edge&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- now I start talking about myself --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ AUTHOR }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dr Monkeysee&amp;#39;s Dev Log&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% block metatags %}
    {% endblock metatags %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Feeds&lt;/h2&gt;
&lt;p&gt;By default Pelican generates ATOM feeds for the main page and each category. Feeds can be generated for other pages like tags, as well as RSS variants for everything, but I don't see the need for it. The other pages won't be interesting in a temporal sense and anything that can read RSS today can also read ATOM.&lt;/p&gt;
&lt;p&gt;The everything feed will go in &lt;strong&gt;base.html&lt;/strong&gt; and the category-specific feed link will go in &lt;strong&gt;category.html&lt;/strong&gt;. Doing this avoids lots of extra conditional logic found in most examples.&lt;/p&gt;
&lt;p&gt;Throwing together a quick-and-dirty &lt;strong&gt;category.html&lt;/strong&gt; lets me test whether the feed insertion is working. &lt;strong&gt;base.html&lt;/strong&gt; and &lt;strong&gt;category.html&lt;/strong&gt; together gives us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- base.html --&amp;gt;&lt;/span&gt;
    {% if FEED_ALL_ATOM %}
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ FEED_ALL_ATOM }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/atom+xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Everything Atom Feed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
    {% block links %}
    {% endblock links %}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- category.html --&amp;gt;&lt;/span&gt;
{% block links %}
    {% if CATEGORY_FEED_ATOM %}
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ CATEGORY_FEED_ATOM|format(category) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/atom+xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ category|title }} Atom Feed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
{% endblock links %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;All Together&lt;/h2&gt;
&lt;p&gt;There's a few other administrivia we can include at this point like Google Analytics script blocks, title tags, and stubbing out a section for content. Once we start looking at layout we'll figure out where common elements like headers and footers go but that's for another day.&lt;/p&gt;
&lt;p&gt;Put it all together and the initial &lt;strong&gt;base.html&lt;/strong&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ DEFAULT_LANG }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IE=edge&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ AUTHOR }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dr Monkeysee&amp;#39;s Dev Log&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% block metatags %}
    {% endblock metatags %}
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{% block title %}{{ SITENAME }}{% endblock title %}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% if FEED_ALL_ATOM %}
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ FEED_ALL_ATOM }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/atom+xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Everything Atom Feed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
    {% block links %}
    {% endblock links %}
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% block content %}
    {% endblock content %}
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://code.jquery.com/jquery-2.1.4.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some details have been truncated or omitted for brevity but you get the idea. I notice in a lot of examples the base template defines a block that encompasses the entire &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag but at this point I don't see a use-case where any child template will override the entire tag. Until that need arises I'm defining blocks for extending common elements like meta tags and links. The content block may become more nuanced once I start on layout but for now a simple block emcompassing all visual elements makes for easy testing of child templates.&lt;/p&gt;
&lt;p&gt;Speaking of which, I need to start defining those. Up next, layout!&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category><category term="theming"></category></entry><entry><title>Pelican blog publishing</title><link href="http://drmonkeysee.github.io/blog/2015/12/15/publish-pelican-blog" rel="alternate"></link><updated>2015-12-15T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-15:blog/2015/12/15/publish-pelican-blog</id><summary type="html">&lt;p&gt;I've got a newly minted Pelican site but I haven't produced anything yet. To find out how that happened go read &lt;a href="http://drmonkeysee.github.io/blog/2015/12/15/setup-pelican-blog"&gt;this post&lt;/a&gt;. Now what? Well I'm not going to detail exactly how I've carefully crafted every blog post because who cares?? You do you. I &lt;em&gt;will&lt;/em&gt; point out some notable considerations that went into putting the blog together.&lt;/p&gt;
&lt;h2&gt;Files Files Files&lt;/h2&gt;
&lt;p&gt;Pelican generated a bunch of files and folders. Here's a quick overview:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Makefile&lt;/strong&gt;/&lt;strong&gt;fabfile.py&lt;/strong&gt; and &lt;strong&gt;develop_server.sh&lt;/strong&gt;: automation scripts for local hosting, publishing, and site generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pelicanconf.py&lt;/strong&gt; and &lt;strong&gt;publishconf.py&lt;/strong&gt;: configuration files for Pelican&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content/&lt;/strong&gt;: content folder is where all blog posts go; subfolders can contain special content like images, about pages, pdfs, tax forms, whatever&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output/&lt;/strong&gt;: Pelican's output folder, everything it generates automatically goes in here which is why we added it to the .gitignore file last time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When Pelican builds the site it combines everything in &lt;strong&gt;content/&lt;/strong&gt; with the settings defined in the &lt;strong&gt;.py&lt;/strong&gt; files, along with any themes and plugins, and spits out static site files to &lt;strong&gt;output/&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Get It Running!&lt;/h2&gt;
&lt;p&gt;Before I can figure out what I want I need to find out what I have. Instead of fiddling with configuration let's get something running. Reading over the documentation I know that all content files have metadata that tells Pelican various things about how the file should be generated so using an example from &lt;a href="https://github.com/eevee/eev.ee"&gt;eevee's blog source&lt;/a&gt; I slap together a simple &lt;strong&gt;content/hello-world.markdown&lt;/strong&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Obligatory&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't recall exactly what I put in there but close enough. Now that I have something to look at in a browser I can use the handy &lt;strong&gt;Makefile&lt;/strong&gt;. &lt;code&gt;make help&lt;/code&gt; lists all the commands but the one we care about is &lt;code&gt;make devserver&lt;/code&gt;. This does several things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compile the site into &lt;strong&gt;output/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Launch a local webserver on localhost:8000&lt;/li&gt;
&lt;li&gt;Monitor changes to content and configuration files and regenerate the site&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, three things. Now I can work entirely in the text editor and immediately see changes in a browser every time I save. To stop it we can run &lt;code&gt;make stopserver&lt;/code&gt;. Time to start futzing with settings.&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pelicanconf.py&lt;/strong&gt; is your friend. It tells Pelican all kinds of things about how to organize and build the HTML and I spent quite a bit of time in here before writing anything approaching a publishable post. This file was built from the answers to &lt;strong&gt;pelican-quickstart&lt;/strong&gt; so there shouldn't be many surprises. A lot of the information in here informs the theme engine so what Pelican does with it depends on the specifics of the templates.&lt;/p&gt;
&lt;p&gt;I fill out various social network fields including GitHub, Twitter, and Email because I guess I like spam. I turn &lt;code&gt;RELATIVE_URLS&lt;/code&gt; on for local development and move the &lt;code&gt;SITEURL&lt;/code&gt; field from &lt;strong&gt;publishconf.py&lt;/strong&gt; so it's available during development. &lt;strong&gt;publishconf.py&lt;/strong&gt; overrides &lt;strong&gt;pelicanconf.py&lt;/strong&gt; settings for the publish action and other than that one change it's fine as is.&lt;/p&gt;
&lt;h3&gt;Metadata&lt;/h3&gt;
&lt;p&gt;Pelican reads a bunch of metadata fields from the top of a blog file to determine various things like title, publish date, tags, etc (see example above). Looking at various examples out there I find that most authors are putting dates explicitly in the metadata but that seems awfully fussy. What if I forget to change the date when I actually publish? Or I fat finger it?&lt;/p&gt;
&lt;p&gt;Fortunately setting &lt;code&gt;DEFAULT_DATE = 'fs'&lt;/code&gt; tells Pelican to figure out publish date from the file system. Most of the time this is what I want and if not I can override in the file directly. Problem solved. (UPDATE: but wait, &lt;a href="http://drmonkeysee.github.io/blog/2015/12/23/blog-config-revisited"&gt;there's more&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;The slug, by default, comes from the title but sometimes I may want a fancier title than I want in the url. Setting &lt;code&gt;SLUGIFY_SOURCE = 'basename'&lt;/code&gt; pulls the slug from the name of the file &lt;em&gt;sans&lt;/em&gt; extension. Alright. Looks good.&lt;/p&gt;
&lt;p&gt;Blog entries should be considered drafts until I'm ready to publish. There's another field &lt;code&gt;Status: draft&lt;/code&gt; that is awfully handy. The documentation claims that this field can be set in &lt;strong&gt;pelicanconf.py&lt;/strong&gt; to set the default to draft (via &lt;code&gt;DEFAULT_METADATA&lt;/code&gt;) but I found it to be really flaky. Sometimes it would make all files drafts, sometimes all files would be published, and sometimes it would do what the file metadata said. It would rotate between these outcomes randomly every time I generated the site, so I abandoned that setting and will have to mark every entry as a draft manually. Oh well.&lt;/p&gt;
&lt;p&gt;That's mostly it for metadata and general settings. But there's one final detail.&lt;/p&gt;
&lt;h3&gt;Urls&lt;/h3&gt;
&lt;p&gt;Url structure is important. It's a user-facing feature, in the parlance of product management. Ugly urls are easy enough to come by these days but any site that's designed for &lt;em&gt;reading&lt;/em&gt; looks a lot nicer if the address bar reflects what it is you're looking at.&lt;/p&gt;
&lt;p&gt;Pelican has a whole slew of settings for generating urls for different parts of the site but the most relevant one here is &lt;code&gt;ARTICLE_URL&lt;/code&gt;. There's a mini-language to construct url templates that will then dictate the file names and folder structure of the published site. I think by default the title is used as the slug so a blog entry titled "Hello World" will generate a url like &lt;code&gt;/hello-world.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Common fashion these days says that's enough (except the .html extension which we'll get to). The competing format most often seen is including the date in the url. I went back and forth on this quite a bit. Title alone was tempting as it looks so clean. Ultimately I decided to go with date in the url because none of these blog entries really stand alone like they would on, say, &lt;a href="https://medium.com/top-stories"&gt;Medium&lt;/a&gt;. When an entry appears in time is important to understanding the site. So dated urls it is.&lt;/p&gt;
&lt;p&gt;However those pesky file extensions are really passé. Pelican makes a distinction between the url and the file it writes to disk. Since most web servers have the notion of a default page for a folder we can use that trick to create extensionless urls with static files. The key is simply to set the &lt;code&gt;ARTICLE_URL&lt;/code&gt; field as &lt;code&gt;{url-template}&lt;/code&gt; and &lt;code&gt;ARTICLE_SAVE_AS&lt;/code&gt; field as &lt;code&gt;{url-template}/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The index file will be treated as the default content and the url will simply reflect the name of the folder. Thus a file &lt;strong&gt;hello-world.markdown&lt;/strong&gt; will be written to &lt;strong&gt;hello-world/index.html&lt;/strong&gt; which will look like &lt;code&gt;/hello-world&lt;/code&gt; in the browser (technically &lt;code&gt;/hello-world/index.html&lt;/code&gt; will also work in the browser but Pelican will generate links to the former). We can do that for all the other &lt;code&gt;*URL&lt;/code&gt; and &lt;code&gt;*SAVE_AS&lt;/code&gt; fields for consistency across the site. Fancy!&lt;/p&gt;
&lt;p&gt;Put it all together and the article url settings are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{category}/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{category}/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I included category as well so the full link includes the "blog" subfolder in case I have other groups of content in the future.&lt;/p&gt;
&lt;p&gt;Finally I blank out the &lt;code&gt;AUTHOR&lt;/code&gt; fields since there's no need to generate those pages. I'm not hiring contributors!&lt;/p&gt;
&lt;h2&gt;Publishing&lt;/h2&gt;
&lt;p&gt;I've got a blog post. I've set various configuration settings. Let's do this thing.&lt;/p&gt;
&lt;p&gt;The Makefile Pelican created includes a &lt;code&gt;github&lt;/code&gt; target that does... everything. Once a blog post is ready to go I run &lt;code&gt;make github&lt;/code&gt; and it all magically happens. To be more specific it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deletes the &lt;strong&gt;output/&lt;/strong&gt; folder&lt;/li&gt;
&lt;li&gt;Generates new HTML into the &lt;strong&gt;output/&lt;/strong&gt; folder&lt;/li&gt;
&lt;li&gt;Uses the ghp-import package to copy the &lt;strong&gt;output/&lt;/strong&gt; folder into the root folder of the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push &lt;code&gt;master&lt;/code&gt; to origin on GitHub&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boom! Done! Our active development branch will remain &lt;code&gt;source&lt;/code&gt;, ghp-import wholly owns &lt;code&gt;master&lt;/code&gt; now, and never the two shall meet.&lt;/p&gt;
&lt;h2&gt;In Summation&lt;/h2&gt;
&lt;p&gt;Everything's set up and now the workflow is very simple: create new blog post files in &lt;strong&gt;content/&lt;/strong&gt;, unmark them as drafts when they're ready to publish, and run &lt;code&gt;make github&lt;/code&gt; to get them out to the world. That's pretty much it. Static sites are awesome!&lt;/p&gt;
&lt;p&gt;I do have a few things left before I consider this blog ready:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;come up with a custom theme&lt;/li&gt;
&lt;li&gt;clarify licenses for the software and site content&lt;/li&gt;
&lt;li&gt;slap google analytics on the site 'cuz why not&lt;/li&gt;
&lt;li&gt;add non-blog pages like about me or whatever who knows&lt;/li&gt;
&lt;li&gt;the devserver is fond of reminding me I have no favicon yet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've just touched on some notable points of my experience getting this blog up and running; Pelican itself has &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;extensive documentation&lt;/a&gt; if you need more detail. Additionally there's a whole galaxy of themes and plugins I haven't mentioned at all. All of this code is up on &lt;a href="https://github.com/drmonkeysee/drmonkeysee.github.io/tree/source"&gt;my GitHub account&lt;/a&gt; if you need specifics on how I've configured the site or structured the post files. Any questions not otherwise answered? Hit me up on &lt;a href="https://twitter.com/drmonkeysee"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Pelican blog setup</title><link href="http://drmonkeysee.github.io/blog/2015/12/15/setup-pelican-blog" rel="alternate"></link><updated>2015-12-15T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-15:blog/2015/12/15/setup-pelican-blog</id><summary type="html">&lt;p&gt;How did I set up this blog? Let's find out.&lt;/p&gt;
&lt;p&gt;First, I followed a &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;couple&lt;/a&gt; &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;handy&lt;/a&gt; &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;guides&lt;/a&gt;. I encourage everyone to go check them out, but I found they were slightly out of date with the latest version of Pelican so I'll document my own setup process here. Maybe someday this too will be a handy guide.&lt;/p&gt;
&lt;h2&gt;Hosting on GitHub Pages&lt;/h2&gt;
&lt;p&gt;I already have a GitHub account so it's a natural fit to host my blog on GitHub Pages, especially given this is primarily about stuff in said GitHub account. GitHub Pages provides a location to host a static site. The emphasis is on &lt;em&gt;static&lt;/em&gt; site; there is no server-side framework so my blog must be made up of HTML, CSS, and JavaScript files. Which is just fine by me. I have a lot of experience with server-side web frameworks and there's very little reason why a blog needs that horsepower (I'm sure the people at &lt;a href="http://www.squarespace.com"&gt;Squarespace&lt;/a&gt; are very nice). Also hosting on GitHub Pages allows me to write and publish with the same programming workflow I'm already used to instead of relying on a weird web editor or something. A static site generator will fit the bill nicely but we'll get to that later.&lt;/p&gt;
&lt;p&gt;Starting at my &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; account I head over to the &lt;a href="https://pages.github.com"&gt;GitHub Pages documentation&lt;/a&gt; and follow the instructions to set up a "User or organization site". At the end of it I have a new repository: &lt;code&gt;drmonkeysee.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Does the hosting work?&lt;/h2&gt;
&lt;p&gt;Let's find out if this hosting is up-to-snuff. First thing, clone the repository locally and create a simple index page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:drmonkeysee/drmonkeysee.github.io.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;drmonkeysee.github.io
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Watch this space...&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt; &amp;gt; index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm cheating a little here as I actually used vim to create a valid HTML5 page but that's harder to show than a single &lt;code&gt;echo&lt;/code&gt; line. I'm sure you can imagine it. Now we commit the file and push to the remote origin on GitHub:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add index.html
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Test hosting&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening a browser and navigating to &lt;code&gt;http://drmonkeysee.github.io/&lt;/code&gt; we see a live site. Times New Roman on a white background, party like it's 1996!&lt;/p&gt;
&lt;h2&gt;Enter Pelican&lt;/h2&gt;
&lt;p&gt;That was pretty easy but we're gonna hit a wall real fast writing a blog with &lt;code&gt;echo&lt;/code&gt;. We want to compose our entries in a nice text editor like a civilized person. It's the 21st century so we shouldn't need to put up with HTML either, opting for a cleaner syntax like &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; or &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;. Static-site generators will do the heavy lifting for us. GitHub Pages recommends &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; but I'm gonna use &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; as I like Python more than Ruby.&lt;/p&gt;
&lt;p&gt;Our site will be hosted from the &lt;code&gt;master&lt;/code&gt; branch. Anything that's not part of our site therefore needs to live in a different branch, otherwise source code, configuration files, readmes, what-have-you will all be served to the public web. That would be a mess. So we'll create a &lt;code&gt;source&lt;/code&gt; branch for our development environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout -b &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything we write including Pelican-related code, blog entry text files, and themes will live in the &lt;code&gt;source&lt;/code&gt; branch and the auto-generated output of Pelican will live in the &lt;code&gt;master&lt;/code&gt; branch. As we will see, Pelican makes this super easy. Some of the handy guides suggest keeping the blog source code in a separate repository and only putting deployed site content into the blog repo, or creating a third branch, &lt;code&gt;gh-pages&lt;/code&gt;, that would temporarily contain the published content before merging to &lt;code&gt;master&lt;/code&gt;. This was probably a reasonable approach with earlier versions of Pelican but these days it supports publishing from an arbitrary branch so we can keep things nice and simple.&lt;/p&gt;
&lt;p&gt;I already have Python 3.5 installed (don't let anyone tell you to settle for 2.7) so we can jump right into setting up Pelican. To keep things tidy we'll create a &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtual environment&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyvenv venv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican Markdown ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This installs pelican for obvious reasons, markdown so we can write blog posts in markdown, and ghp-import so we can publish to GitHub Pages. The next step is run the quickstart script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
...
&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What will be the title of this web site? Dev Log and also other Blog Stuff too
&amp;gt; Who will be the author of this web site? Brandon Stansbury
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://drmonkeysee.github.io       
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;  
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What is your &lt;span class="nb"&gt;time &lt;/span&gt;zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; America/Los_Angeles
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican creates a bunch of files and we're ready to rock. The questions are pretty straightforward but note that I've asked for a Fabfile/Makefile and an auto-reload script. The combination of the two allows us to run several handy Pelican commands including local hosting for development and publishing to our remote master branch.&lt;/p&gt;
&lt;p&gt;Time zone stymied me for a moment. Like any good developer I have a sextant and stable pendulum so I know what time zone I'm in but it was unclear what format Pelican expected. Is it PST? US/Pacific? What if I get it wrong? Turns out this ends up in a config file so it's easy to fix later but Pelican is expecting the tz  name listed in &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;this table&lt;/a&gt;. Now you know.&lt;/p&gt;
&lt;p&gt;So we have an empty Pelican site and a bunch of auto-generated scripts. Head over to the &lt;a href="https://github.com/github/gitignore"&gt;gitignore repo&lt;/a&gt;, grab the Python template, add &lt;strong&gt;venv/&lt;/strong&gt; and &lt;strong&gt;output/&lt;/strong&gt; to the ignore list, and commit everything into the &lt;code&gt;source&lt;/code&gt; branch. Now we write a hello world post, get bored, and never write anything again!&lt;/p&gt;
&lt;p&gt;Next time we'll tackle writing and publishing the first blog entry, as well as blog configuration.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Theme Shopping</title><link href="http://drmonkeysee.github.io/blog/2015/12/05/theme-shopping" rel="alternate"></link><updated>2015-12-05T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-05:blog/2015/12/05/theme-shopping</id><summary type="html">&lt;p&gt;I've settled on a url scheme and other random settings so the time has come to shop for a theme. I popped over to &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; and... frankly... not crazy about what's on offer.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, the craftsmanship on display is fine, but none of them grab me. However the pelican-bootstrap3 theme points a way forward. What if I just built my own theme on top of bootstrap? Follow up question: why don't I just use pelican-bootstrap3?&lt;/p&gt;
&lt;p&gt;In short: I want control. The pelican-bootstrap3 theme contains the contents of bootstrap3 inline instead of pulling it in from a CDN, which adds a maintenance burden keeping everything up-to-date with official release channels. I'm one of those devs that likes to sit on the latest versions as seamlessly as possible and cleaning up someone else's theme to square it away to my satisfaction sounds less fun than just writing it myself.&lt;/p&gt;
&lt;p&gt;So why not? Well it means this blog is gonna look pretty entry-level for longer than I wanted. On the other hand I control the blog from the ground up and might as well learn &lt;a href="http://jinja.pocoo.org"&gt;Jinja&lt;/a&gt; while I'm here. As will become evident in later entries much of my hobby work is about building stuff from scratch so carrying that philosophy forward to my dev log seems a natural fit.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category><category term="theming"></category></entry><entry><title>Hello Published!</title><link href="http://drmonkeysee.github.io/blog/2015/12/04/hello-published" rel="alternate"></link><updated>2015-12-04T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-04:blog/2015/12/04/hello-published</id><summary type="html">&lt;p&gt;After fiddling with lots of settings and url schemes publishing was &lt;strong&gt;super&lt;/strong&gt; easy! Turns out the current version of Pelican (3.6.3 as of this writing) auto-generates github page scripts so one &lt;code&gt;make github&lt;/code&gt; call later and *POOF* my dev log is a real boy.&lt;/p&gt;
&lt;p&gt;At the moment I'm still running on the built-in theme so I to need fix that. You may notice the author link doesn't go anywhere. I'm the only author but the theme is stubbornly insisting on linking to it anyway. I gotta do some other spicing up like a fancy favicon or something.&lt;/p&gt;
&lt;p&gt;As for plugins, hopefully there's something that sets meta tags. All the cool kids have meta tags these days. And GitHub-style code blocks. Oh, looks like the default settings already have that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a fancy blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also I haven't picked a license yet so... uh... no one steal anything in the meantime! Next step: make this blog post obsolete by changing everything about how the blog works.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Hello World</title><link href="http://drmonkeysee.github.io/blog/2015/12/04/hello-world" rel="alternate"></link><updated>2015-12-04T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-04:blog/2015/12/04/hello-world</id><summary type="html">&lt;p&gt;In the finest tradition of new projects this is the hello world post for my dev log aka blog of other stuff too. The intent here is to document my work on various projects on my Github account, so naturally the log itself should &lt;em&gt;also&lt;/em&gt; be a project on my Github account. And here we are.&lt;/p&gt;
&lt;p&gt;This first entry is a test of the publishing system itself and I imagine I'll be tweaking it a bit before it actually shows up live anywhere. The breakdown: I'm using &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican&lt;/a&gt; as the blog publisher and generally following &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;this guide&lt;/a&gt; to get it all working. A nice surprise, the latest version of Pelican seems to support Github pages publishing directly so I may not need the branch-dance documented in the guide. I'm also checking &lt;a href="http://mathamy.com"&gt;mathamy&lt;/a&gt; and &lt;a href="http://eev.ee"&gt;fuzzy notepad&lt;/a&gt; as a guide for organization. If it all works out my next entry will probably detail exactly how I got this blog set up.&lt;/p&gt;
&lt;p&gt;Things I need to figure out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;themes&lt;/li&gt;
&lt;li&gt;plugins I may want&lt;/li&gt;
&lt;li&gt;different sections n' stuff for the site&lt;/li&gt;
&lt;li&gt;what the heck are all the right settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh and licensing. I guess I need to figure out the right badges and social links and blahbeddyboo. Here we go!&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry></feed>