<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dev Log and also other Blog Stuff too</title><link href="http://drmonkeysee.github.io/" rel="alternate"></link><link href="http://drmonkeysee.github.io/feeds/blog.atom.xml" rel="self"></link><id>http://drmonkeysee.github.io/</id><updated>2015-12-05T20:47:19-08:00</updated><entry><title>Theme Shopping</title><link href="http://drmonkeysee.github.io/blog/2015/12/05/theme-shopping" rel="alternate"></link><updated>2015-12-05T20:47:19-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-05:blog/2015/12/05/theme-shopping</id><summary type="html">&lt;p&gt;I've settled on a url scheme and other random settings so the time has come to shop for a theme. I popped over to &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; and... frankly... not crazy about what's on offer.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, the craftsmanship on display is fine, but none of them grab me. However the pelican-bootstrap3 theme points a way forward. What if I just built my own theme on top of bootstrap? Follow up question: why don't I just use pelican-bootstrap3?&lt;/p&gt;
&lt;p&gt;In short: I want control. The pelican-bootstrap3 theme contains the contents of bootstrap3 inline instead of pulling it in from a CDN, which adds a maintenance burden keeping everything up-to-date with official release channels. I'm one of those devs that likes to sit on the latest versions as seamlessly as possible and cleaning up someone else's theme to square it away to my satisfaction sounds less fun than just writing it myself.&lt;/p&gt;
&lt;p&gt;So why not? Well it means this blog is gonna look pretty entry-level for longer than I wanted. On the other hand I control the blog from the ground up and might as well learn &lt;a href="http://jinja.pocoo.org"&gt;Jinja&lt;/a&gt; while I'm here. As will become evident in later entries much of my hobby work is about building stuff from scratch so carrying that philosophy forward to my dev log seems a natural fit.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Hello Published!</title><link href="http://drmonkeysee.github.io/blog/2015/12/04/hello-published" rel="alternate"></link><updated>2015-12-04T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-04:blog/2015/12/04/hello-published</id><summary type="html">&lt;p&gt;After fiddling with lots of settings and url schemes publishing was &lt;strong&gt;super&lt;/strong&gt; easy! Turns out the current version of Pelican (3.6.3 as of this writing) auto-generates github page scripts so one &lt;code&gt;make github&lt;/code&gt; call later and *POOF* my dev log is a real boy.&lt;/p&gt;
&lt;p&gt;At the moment I'm still running on the built-in theme so I to need fix that. You may notice the author link doesn't go anywhere. I'm the only author but the theme is stubbornly insisting on linking to it anyway. I gotta do some other spicing up like a fancy favicon or something.&lt;/p&gt;
&lt;p&gt;As for plugins, hopefully there's something that sets meta tags. All the cool kids have meta tags these days. And GitHub-style code blocks. Oh, looks like the default settings already have that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a fancy blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also I haven't picked a license yet so... uh... no one steal anything in the meantime! Next step: make this blog post obsolete by changing everything about how the blog works.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Hello World</title><link href="http://drmonkeysee.github.io/blog/2015/12/04/hello-world" rel="alternate"></link><updated>2015-12-04T00:00:00-08:00</updated><author><name>Brandon Stansbury</name></author><id>tag:drmonkeysee.github.io,2015-12-04:blog/2015/12/04/hello-world</id><summary type="html">&lt;p&gt;In the finest tradition of new projects this is the hello world post for my dev log aka blog of other stuff too. The intent here is to document my work on various projects on my Github account, so naturally the log itself should &lt;em&gt;also&lt;/em&gt; be a project on my Github account. And here we are.&lt;/p&gt;
&lt;p&gt;This first entry is a test of the publishing system itself and I imagine I'll be tweaking it a bit before it actually shows up live anywhere. The breakdown: I'm using &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican&lt;/a&gt; as the blog publisher and generally following &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;this guide&lt;/a&gt; to get it all working. A nice surprise, the latest version of Pelican seems to support Github pages publishing directly so I may not need the branch-dance documented in the guide. I'm also checking &lt;a href="http://mathamy.com"&gt;mathamy&lt;/a&gt; and &lt;a href="http://eev.ee"&gt;fuzzy notepad&lt;/a&gt; as a guide for organization. If it all works out my next entry will probably detail exactly how I got this blog set up.&lt;/p&gt;
&lt;p&gt;Things I need to figure out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;themes&lt;/li&gt;
&lt;li&gt;plugins I may want&lt;/li&gt;
&lt;li&gt;different sections n' stuff for the site&lt;/li&gt;
&lt;li&gt;what the heck are all the right settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh and licensing. I guess I need to figure out the right badges and social links and blahbeddyboo. Here we go!&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry></feed>